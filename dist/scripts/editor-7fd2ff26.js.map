{"version":3,"file":"editor-7fd2ff26.js","mappings":"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","sources":["webpack://@bigbite/bigbite-image-comparison/external window [\"wp\",\"blocks\"]","webpack://@bigbite/bigbite-image-comparison/external window [\"wp\",\"components\"]","webpack://@bigbite/bigbite-image-comparison/external window [\"wp\",\"blockEditor\"]","webpack://@bigbite/bigbite-image-comparison/external window [\"wp\",\"element\"]","webpack://@bigbite/bigbite-image-comparison/external window [\"wp\",\"i18n\"]","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/Caption.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsOverflow.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsDividerAxis.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsContainerSize.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsDividerIconGap.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsDividerBoxWidth.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsDividerBoxHeight.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsDividerThickness.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsDividerInitialPosition.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/SettingsDividerBoxBorderRadius.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/Settings.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/ContainerDivider.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/Container.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/index.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/Edit.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison/components/Save.js","webpack://@bigbite/bigbite-image-comparison/external window [\"wp\",\"coreData\"]","webpack://@bigbite/bigbite-image-comparison/external window [\"wp\",\"data\"]","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison-item/components/Image.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison-item/components/AlternativeText.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison-item/components/ResolutionTool.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison-item/components/Settings.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison-item/index.js","webpack://@bigbite/bigbite-image-comparison/./src/blocks/image-comparison-item/components/Edit.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { RichText } from '@wordpress/block-editor';\n\n/**\n * Caption attribute editor\n *\n * @param {object}   props               Component props\n * @param {string}   props.caption       Caption string\n * @param {function} props.setAttributes Update block attributes\n */\nconst Caption = ({ caption, setAttributes, uniqueId }) => {\n  const allowedFormats = [\n    'core/link',\n    'core/bold',\n    'core/code',\n    'core/italic',\n    'core/language',\n    'core/keyboard',\n    'core/subscript',\n    'core/text-color',\n    'core/superscript',\n    'core/strikethrough',\n  ];\n\n  return (\n    <RichText\n      id={uniqueId}\n      value={caption}\n      disableLineBreaks\n      identifier={caption}\n      tagName=\"figcaption\"\n      allowedFormats={allowedFormats}\n      className=\"wp-block-bigbite-image-comparison__caption\"\n      onChange={(value) => setAttributes({ caption: value })}\n      placeholder={__('Please enter a caption', 'bigbite-image-comparison')}\n    />\n  );\n};\n\nexport default Caption;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { ToggleControl } from '@wordpress/components';\n\n/**\n * Setting control for the overflow attribute\n *\n * @param {object}   props               Component props\n * @param {bool}     props.overflow      Overflow attribute\n * @param {function} props.setAttributes Update block attributes\n */\nconst SettingsOverflow = ({ overflow, setAttributes }) => (\n  <ToggleControl\n    checked={overflow}\n    label={__('Overflow', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ overflow: value })}\n    help={__('Allow the divider to overflow the container', 'bigbite-image-comparison')}\n  />\n);\n\nexport default SettingsOverflow;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n  __experimentalToggleGroupControl as ToggleGroupControl,\n  __experimentalToggleGroupControlOption as ToggleGroupControlOption,\n} from '@wordpress/components';\n\n/**\n * Setting control for the dividerAxis attribute\n *\n * @param {object}   props               Component props\n * @param {number}   props.dividerAxis   Divider axis\n * @param {function} props.setAttributes Update block attributes\n */\nconst SettingsDividerAxis = ({ dividerAxis, setAttributes }) => (\n  <ToggleGroupControl\n    isBlock\n    value={dividerAxis}\n    label={__('Divider Axis', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ dividerAxis: value })}\n    help={__('The axis on which the divider will be oriented', 'bigbite-image-comparison')}\n  >\n    <ToggleGroupControlOption value=\"vertical\" label={__('Vertical', 'bigbite-image-comparison')} />\n    <ToggleGroupControlOption\n      value=\"horizontal\"\n      label={__('Horizontal', 'bigbite-image-comparison')}\n    />\n  </ToggleGroupControl>\n);\n\nexport default SettingsDividerAxis;\n","import {\n  __experimentalGrid as Grid,\n  __experimentalUnitControl as UnitControl,\n} from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Setting control for the containerHeight and containerWidth attributes\n *\n * @param {number}   props.containerHeight  Container height\n * @param {number}   props.containerWidth   Container width\n * @param {function} props.setAttributes    Update block attributes\n */\nconst SettingsContainerSize = ({ containerBoxHeight, containerBoxWidth, setAttributes }) => {\n  const availableUnits = [\n    {\n      a11yLabel: __('Pixels (px)', 'bigbite-image-comparison'),\n      label: 'px',\n      step: 1,\n      value: 'px',\n    },\n  ];\n\n  return (\n    <Grid columns={2} gap={2}>\n      <UnitControl\n        label={__('Width', 'bigbite-image-comparison')}\n        onChange={(newWidth) => setAttributes({ containerWidth: newWidth })}\n        value={containerBoxWidth}\n        units={availableUnits}\n      />\n      <UnitControl\n        label={__('Height', 'bigbite-image-comparison')}\n        onChange={(newHeight) => setAttributes({ containerHeight: newHeight })}\n        value={containerBoxHeight}\n        units={availableUnits}\n      />\n    </Grid>\n  );\n};\n\nexport default SettingsContainerSize;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { RangeControl } from '@wordpress/components';\n\n/**\n * Setting control for the dividerIconGap attribute\n *\n * @param {object}   props                Component props\n * @param {number}   props.dividerIconGap Divider icon gap\n * @param {function} props.setAttributes  Update block attributes\n */\nconst SettingsDividerIconGap = ({ dividerIconGap, setAttributes }) => (\n  <RangeControl\n    min={0}\n    step={1}\n    max={100}\n    initialPosition={dividerIconGap}\n    label={__('Icon Gap (px)', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ dividerIconGap: value })}\n  />\n);\n\nexport default SettingsDividerIconGap;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { RangeControl } from '@wordpress/components';\n\n/**\n * Setting control for the dividerBoxWidth attribute\n *\n * @param {object}   props                 Component props\n * @param {number}   props.dividerBoxWidth Divider box width\n * @param {function} props.setAttributes   Update block attributes\n */\nconst SettingsDividerBoxWidth = ({ dividerBoxWidth, setAttributes }) => (\n  <RangeControl\n    min={32}\n    step={1}\n    max={128}\n    initialPosition={dividerBoxWidth}\n    label={__('Box Width (px)', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ dividerBoxWidth: value })}\n  />\n);\n\nexport default SettingsDividerBoxWidth;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { RangeControl } from '@wordpress/components';\n\n/**\n * Setting control for the dividerBoxHeight attribute\n *\n * @param {object}   props                  Component props\n * @param {number}   props.dividerBoxHeight Divider box height\n * @param {function} props.setAttributes    Update block attributes\n */\nconst SettingsDividerBoxHeight = ({ dividerBoxHeight, setAttributes }) => (\n  <RangeControl\n    min={32}\n    step={1}\n    max={128}\n    initialPosition={dividerBoxHeight}\n    label={__('Box Height (px)', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ dividerBoxHeight: value })}\n  />\n);\n\nexport default SettingsDividerBoxHeight;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { RangeControl } from '@wordpress/components';\n\n/**\n * Setting control for the dividerThickness attribute\n *\n * @param {object}   props                  Component props\n * @param {number}   props.dividerThickness Divider thickness\n * @param {function} props.setAttributes    Update block attributes\n */\nconst SettingsDividerThickness = ({ dividerThickness, setAttributes }) => (\n  <RangeControl\n    min={0}\n    max={64}\n    step={1}\n    initialPosition={dividerThickness}\n    label={__('Thickness (px)', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ dividerThickness: value })}\n  />\n);\n\nexport default SettingsDividerThickness;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { RangeControl } from '@wordpress/components';\n\n/**\n * Setting control for the dividerInitialPosition attribute\n *\n * @param {object}   props                        Component props\n * @param {number}   props.dividerInitialPosition Dividers initial position\n * @param {function} props.setAttributes          Update block attributes\n */\nconst SettingsDividerInitialPosition = ({ dividerInitialPosition, setAttributes }) => (\n  <RangeControl\n    min={0}\n    step={1}\n    max={100}\n    initialPosition={dividerInitialPosition}\n    label={__('Divider Initial Position', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ dividerInitialPosition: value })}\n  />\n);\n\nexport default SettingsDividerInitialPosition;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { RangeControl } from '@wordpress/components';\n\n/**\n * Setting control for the dividerBoxBorderRadius attribute\n *\n * @param {object}   props                        Component props\n * @param {object}   props.dividerBoxBorderRadius Divider box border radius\n * @param {function} props.setAttributes          Update block attributes\n */\nconst SettingsDividerBoxBorderRadius = ({ dividerBoxBorderRadius, setAttributes }) => (\n  <RangeControl\n    min={0}\n    max={64}\n    step={1}\n    initialPosition={dividerBoxBorderRadius?.top}\n    label={__('Border Radius (px)', 'bigbite-image-comparison')}\n    onChange={(value) =>\n      setAttributes({\n        dividerBoxBorderRadius: {\n          top: value,\n          right: value,\n          bottom: value,\n          left: value,\n        },\n      })\n    }\n  />\n);\n\nexport default SettingsDividerBoxBorderRadius;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { PanelBody } from '@wordpress/components';\nimport {\n  withColors,\n  ContrastChecker,\n  InspectorControls,\n  __experimentalColorGradientSettingsDropdown as ColorGradientSettingsDropdown,\n  __experimentalUseMultipleOriginColorsAndGradients as useMultipleOriginColorsAndGradients,\n} from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport SettingsOverflow from './SettingsOverflow';\nimport SettingsDividerAxis from './SettingsDividerAxis';\nimport SettingsContainerSize from './SettingsContainerSize';\nimport SettingsDividerIconGap from './SettingsDividerIconGap';\nimport SettingsDividerBoxWidth from './SettingsDividerBoxWidth';\nimport SettingsDividerBoxHeight from './SettingsDividerBoxHeight';\nimport SettingsDividerThickness from './SettingsDividerThickness';\nimport SettingsDividerInitialPosition from './SettingsDividerInitialPosition';\nimport SettingsDividerBoxBorderRadius from './SettingsDividerBoxBorderRadius';\n\n/**\n * Renders block inspector controls sidebar\n *\n * @param {object}   props                      Component props\n * @param {object}   props.attributes           Block attributes\n * @param {function} props.setAttributes        Update block attributes\n * @param {string}   props.clientId             Client ID\n * @param {string}   props.dividerColour        Divider colour\n * @param {function} props.setDividerColour     Set divider colour\n * @param {string}   props.dividerBoxColour     Divider box colour\n * @param {function} props.setDividerBoxColour  Set divider box colour\n * @param {string}   props.dividerIconColour    Divider icon colour\n * @param {function} props.setDividerIconColour Set divider icon colour\n */\nconst Settings = ({\n  attributes: {\n    overflow,\n    dividerInitialPosition,\n    dividerAxis,\n    dividerThickness,\n    customDividerColour,\n    customDividerBoxColour,\n    dividerBoxWidth,\n    dividerBoxHeight,\n    dividerBoxBorderRadius,\n    customDividerIconColour,\n    dividerIconGap,\n    customCaptionTextColour,\n    customCaptionBackgroundColour,\n    containerHeight,\n    containerWidth,\n  },\n  shouldDisplayResize,\n  setAttributes,\n  clientId,\n  dividerColour,\n  setDividerColour,\n  dividerBoxColour,\n  setDividerBoxColour,\n  dividerIconColour,\n  setDividerIconColour,\n  captionTextColour,\n  setCaptionTextColour,\n  captionBackgroundColour,\n  setCaptionBackgroundColour,\n}) => {\n  // extra required settings for experimental `ColorGradientSettingsDropdown`\n  const { colors, disableCustomColors } = useMultipleOriginColorsAndGradients();\n\n  // custom colour settings for use with experimental `ColorGradientSettingsDropdown`\n  const colourSettings = [\n    {\n      label: __('Divider', 'bigbite-image-comparison'),\n      colorValue: dividerColour?.color || customDividerColour,\n      /**\n       * Updates dividerColour and customDividerColour attributes\n       *\n       * @param {string} value Colour value\n       */\n      onColorChange: (value = '') => {\n        setDividerColour(value);\n        setAttributes({ customDividerColour: value });\n      },\n    },\n    {\n      label: __('Divider Box', 'bigbite-image-comparison'),\n      colorValue: dividerBoxColour?.color || customDividerBoxColour,\n      /**\n       * Updates dividerBoxColour and customDividerBoxColour attributes\n       *\n       * @param {string} value Colour value\n       */\n      onColorChange: (value = '') => {\n        setDividerBoxColour(value);\n        setAttributes({ customDividerBoxColour: value });\n      },\n    },\n    {\n      label: __('Divider Icon', 'bigbite-image-comparison'),\n      colorValue: dividerIconColour?.color || customDividerIconColour,\n      /**\n       * Updates dividerIconColour and customDividerIconColour attributes\n       *\n       * @param {string} value Colour value\n       */\n      onColorChange: (value = '') => {\n        setDividerIconColour(value);\n        setAttributes({ customDividerIconColour: value });\n      },\n    },\n  ];\n\n  colourSettings?.push(\n    {\n      label: __('Caption Text', 'bigbite-image-comparison'),\n      colorValue: captionTextColour?.color || customCaptionTextColour,\n      /**\n       * Updates captionTextColour and customCaptionTextColour attributes\n       *\n       * @param {string} value Colour value\n       */\n      onColorChange: (value) => {\n        setCaptionTextColour(value);\n        setAttributes({ customCaptionTextColour: value });\n      },\n    },\n    {\n      label: __('Caption Background', 'bigbite-image-comparison'),\n      colorValue: captionBackgroundColour?.color || customCaptionBackgroundColour,\n      /**\n       * Updates captionBackgroundColour and customCaptionBackgroundColour attributes\n       *\n       * @param {string} value Colour value\n       */\n      onColorChange: (value) => {\n        setCaptionBackgroundColour(value);\n        setAttributes({ customCaptionBackgroundColour: value });\n      },\n    },\n  );\n\n  return (\n    <>\n      <InspectorControls>\n        <PanelBody title={__('Settings', 'bigbite-image-comparison')}>\n          <SettingsOverflow overflow={overflow} setAttributes={setAttributes} />\n          {shouldDisplayResize ? (\n            <SettingsContainerSize\n              containerBoxHeight={containerHeight}\n              containerBoxWidth={containerWidth}\n              setAttributes={setAttributes}\n            />\n          ) : null}\n          <SettingsDividerInitialPosition\n            setAttributes={setAttributes}\n            dividerInitialPosition={dividerInitialPosition}\n          />\n          <SettingsDividerAxis dividerAxis={dividerAxis} setAttributes={setAttributes} />\n        </PanelBody>\n      </InspectorControls>\n      <InspectorControls group=\"styles\">\n        <PanelBody title={__('Divider', 'bigbite-image-comparison')}>\n          <SettingsDividerThickness\n            setAttributes={setAttributes}\n            dividerThickness={dividerThickness}\n          />\n          <SettingsDividerBoxWidth\n            setAttributes={setAttributes}\n            dividerBoxWidth={dividerBoxWidth}\n          />\n          <SettingsDividerBoxHeight\n            setAttributes={setAttributes}\n            dividerBoxHeight={dividerBoxHeight}\n          />\n          <SettingsDividerBoxBorderRadius\n            setAttributes={setAttributes}\n            dividerBoxBorderRadius={dividerBoxBorderRadius}\n          />\n          <SettingsDividerIconGap dividerIconGap={dividerIconGap} setAttributes={setAttributes} />\n        </PanelBody>\n      </InspectorControls>\n      <InspectorControls group=\"color\">\n        <ColorGradientSettingsDropdown\n          colors={colors}\n          panelId={clientId}\n          settings={colourSettings}\n          hasColorsOrGradients={false}\n          __experimentalIsRenderedInSidebar\n          disableCustomColors={disableCustomColors}\n        />\n        <ContrastChecker\n          textColor={customCaptionTextColour}\n          backgroundColor={customCaptionBackgroundColour}\n        />\n      </InspectorControls>\n    </>\n  );\n};\n\nconst colourAttributes = {\n  dividerColour: 'divider-colour',\n  dividerBoxColour: 'divider-box-colour',\n  dividerIconColour: 'divider-icon-colour',\n  captionTextColour: 'caption-text-colour',\n  captionBackgroundColour: 'caption-background-colour',\n};\n\nexport default withColors(colourAttributes)(Settings);\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Container divider\n */\nconst ContainerDivider = () => (\n  <div className=\"wp-block-bigbite-image-comparison__divider\">\n    <button type=\"button\" aria-label={__('Divider Button', 'bigbite-image-comparison')}>\n      <span />\n      <span />\n    </button>\n  </div>\n);\n\nexport default ContainerDivider;\n","/**\n * Internal dependencies\n */\nimport ContainerDivider from './ContainerDivider';\n\n/**\n * Container for item inner blocks\n *\n * @param {object} props          Component props\n * @param {object} props.children Children elements\n */\nconst Container = ({ children }) => (\n  <div className=\"wp-block-bigbite-image-comparison__container\">\n    {children}\n    <ContainerDivider />\n  </div>\n);\n\nexport default Container;\n","/**\n * External dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport Edit from './components/Edit';\nimport Save from './components/Save';\nimport './styles/editor.scss';\nimport metadata from '../../../inc/blocks/image-comparison/block.json';\n\nregisterBlockType(metadata.name, {\n  edit: Edit,\n  save: Save,\n});\n","/**\n * External dependencies\n */\nimport { ResizableBox } from '@wordpress/components';\nimport { useInnerBlocksProps, useBlockProps, useSettings } from '@wordpress/block-editor';\nimport { useEffect } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport Caption from './Caption';\nimport Settings from './Settings';\nimport Container from './Container';\n\n/**\n * Block edit function\n *\n * @param {object}   props               Component props\n * @param {object}   props.attributes    Block attributes\n * @param {function} props.setAttributes Update block attributes\n * @param {string}   props.clientId      Block client ID\n */\nconst Edit = ({ attributes, setAttributes, clientId }) => {\n  /**\n   * Set contentWidth based on the layout.contentSize setting\n   */\n  const [contentWidth] = useSettings('layout.contentSize');\n\n  const {\n    overflow,\n    dividerInitialPosition,\n    dividerAxis,\n    dividerThickness,\n    dividerColour,\n    customDividerColour,\n    dividerBoxColour,\n    customDividerBoxColour,\n    dividerBoxWidth,\n    dividerBoxHeight,\n    dividerBoxBorderRadius,\n    dividerIconColour,\n    customDividerIconColour,\n    dividerIconGap,\n    caption,\n    captionTextColour,\n    customCaptionTextColour,\n    captionBackgroundColour,\n    customCaptionBackgroundColour,\n    containerHeight,\n    containerWidth,\n  } = attributes;\n\n  const innerBlockSettings = {\n    template: [['bigbite/image-comparison-item'], ['bigbite/image-comparison-item']],\n    templateLock: 'inserter',\n    orientation: dividerAxis === 'horizontal' ? 'vertical' : 'horizontal',\n  };\n\n  /**\n   * Initially set the resize handles to be hidden\n   */\n  let shouldDisplayResize = false;\n\n  /**\n   * Overwrite the default size of the block with the theme's\n   * defined contentSize, if it exists. This should only be\n   * applied if no images have been added to the block.\n   */\n  useEffect(() => {\n    if (!shouldDisplayResize) {\n      setAttributes({ containerWidth: contentWidth });\n    }\n  }, [contentWidth]);\n\n  /**\n   * Retrieve the inner blocks\n   */\n  const [{ innerBlocks }] = wp.data.select('core/block-editor').getBlocksByClientId(clientId);\n\n  /**\n   * Determine whether to allow the resize handles to be\n   * displayed based on if an image is assigned or not\n   */\n  innerBlocks.forEach((block) => {\n    if (block?.attributes?.id) {\n      shouldDisplayResize = true;\n    }\n  });\n\n  /**\n   * Only ever display the right, bottom, and bottomRight handles\n   */\n  const resizeDirectionSettings = {\n    bottom: shouldDisplayResize,\n    bottomLeft: false,\n    bottomRight: shouldDisplayResize,\n    right: shouldDisplayResize,\n    left: false,\n    top: false,\n    topLeft: false,\n    topRight: false,\n  };\n\n  const blockProps = useBlockProps({\n    style: {\n      '--bigbite-image-comparison-overflow': overflow ? 'visible' : 'hidden',\n      '--bigbite-image-comparison-divider-initial-position': dividerInitialPosition,\n      '--bigbite-image-comparison-divider-thickness': dividerThickness,\n      '--bigbite-image-comparison-divider-box-width': dividerBoxWidth,\n      '--bigbite-image-comparison-divider-box-height': dividerBoxHeight,\n      '--bigbite-image-comparison-divider-box-border-radius': dividerBoxBorderRadius?.top,\n      '--bigbite-image-comparison-divider-icon-gap': dividerIconGap,\n      '--bigbite-image-comparison-divider-colour': dividerColour\n        ? `var( --wp--preset--color--${dividerColour}, ${customDividerColour} )`\n        : customDividerColour,\n      '--bigbite-image-comparison-divider-box-colour': dividerBoxColour\n        ? `var( --wp--preset--color--${dividerBoxColour}, ${customDividerBoxColour} )`\n        : customDividerBoxColour,\n      '--bigbite-image-comparison-divider-icon-colour': dividerIconColour\n        ? `var( --wp--preset--color--${dividerIconColour}, ${customDividerIconColour} )`\n        : customDividerIconColour,\n      '--bigbite-image-comparison-caption-text-colour': captionTextColour\n        ? `var( --wp--preset--color--${captionTextColour}, ${customCaptionTextColour} )`\n        : customCaptionTextColour,\n      '--bigbite-image-comparison-caption-background-colour': captionBackgroundColour\n        ? `var( --wp--preset--color--${captionBackgroundColour}, ${customCaptionBackgroundColour} )`\n        : customCaptionBackgroundColour,\n      '--bigbite-image-comparison-container-height': containerHeight,\n      '--bigbite-image-comparison-container-width': containerWidth,\n    },\n    className: {\n      'wp-block-bigbite-image-comparison--horizontal': dividerAxis === 'horizontal',\n    },\n  });\n\n  const uniqueId = `fig-${clientId}`;\n\n  const { children, ...innerBlocksProps } = useInnerBlocksProps(blockProps, innerBlockSettings);\n\n  /**\n   * Function to update the value whilst retaining the measurement unit\n   *\n   * @param string  measurement  The current height / width\n   * @param number  delta        Value to update the height / width by\n   *\n   * @return string\n   */\n  const updateMeasurement = (measurement, delta) => {\n    /**\n     * Regex to separate digits and unit\n     */\n    const regex = /(\\d+)(.+)/;\n    const parts = measurement.match(regex);\n    if (parts) {\n      /**\n       * Define the numerical value\n       */\n      const value = parseInt(parts[1], 10);\n      /**\n       * Define the unit of measurement\n       */\n      const unit = parts[2];\n      /**\n       * Make the calculation and return the updated value with the measurement unit\n       */\n      return `${value + delta}${unit}`;\n    }\n    /**\n     * Return the original value if no match is found\n     */\n    return measurement;\n  };\n\n  /**\n   * If the caption exists, include the aria-labelledby attribute to block props\n   *\n   * This will supersede the default aria-label attribute\n   */\n  if (caption) {\n    innerBlocksProps['aria-labelledby'] = uniqueId;\n  }\n\n  /**\n   * Handle the container resize\n   *\n   * @param object delta - The delta object with the height and width changes\n   */\n  const handleContainerResize = (delta) => {\n    const updatedHeight = updateMeasurement(containerHeight, delta.height);\n    const updatedWidth = updateMeasurement(containerWidth, delta.width);\n    setAttributes({\n      containerHeight: updatedHeight,\n      containerWidth: updatedWidth,\n    });\n  };\n\n  return (\n    <>\n      <Settings\n        attributes={attributes}\n        shouldDisplayResize={shouldDisplayResize}\n        setAttributes={setAttributes}\n        clientId={clientId}\n      />\n      {/* eslint-disable-next-line react/jsx-props-no-spreading -- recommended usage of innerBlockProps */}\n      <figure {...innerBlocksProps}>\n        <ResizableBox\n          showHandle\n          enable={resizeDirectionSettings}\n          size={{\n            height: containerHeight,\n            width: containerWidth,\n          }}\n          minHeight=\"150\"\n          minWidth=\"150\"\n          onResizeStop={(event, direction, elt, delta) => handleContainerResize(delta)}\n        >\n          <Container>{children}</Container>\n        </ResizableBox>\n        <Caption caption={caption} setAttributes={setAttributes} uniqueId={uniqueId} />\n      </figure>\n    </>\n  );\n};\n\nexport default Edit;\n","/**\n * External dependencies\n */\nimport { useInnerBlocksProps } from '@wordpress/block-editor';\n\n/**\n * Block save function\n */\nconst Save = () => {\n  const innerBlocks = useInnerBlocksProps.save();\n\n  return innerBlocks?.children;\n};\n\nexport default Save;\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { MediaUpload, MediaUploadCheck } from '@wordpress/block-editor';\nimport { Button, Flex, FlexItem } from '@wordpress/components';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\nimport { useMemo } from '@wordpress/element';\n\n/**\n * Checks if WP generated the specified image size.\n *\n * @param {Object} image the image to pick from\n * @param {string} size  the size to locate\n *\n * @return {boolean} Whether or not it has default image size.\n */\nfunction hasSize(image, size) {\n  return (\n    'url' in (image?.sizes?.[size] ?? {}) ||\n    'source_url' in (image?.media_details?.sizes?.[size] ?? {})\n  );\n}\n\n/**\n * Retrieve the URI for an image.\n *\n * @param {Object} image the image to pick from\n * @param {String} size  the size to locate\n *\n * @return {String} the located image size URI.\n */\nfunction imageUrl(image, size) {\n  return (\n    image?.sizes?.[size]?.url ||\n    image?.media_details?.sizes?.[size]?.source_url ||\n    image?.url ||\n    image?.source_url\n  );\n}\n\n/**\n * Renders image in various states\n *\n * @param {object}   props                 Component props\n * @param {number}   props.id              The image ID\n * @param {string}   props.sizeSlug        The requested image size\n * @param {string}   props.alternativeText Alternative image text\n * @param {function} props.setAttributes   Update block attributes\n */\nconst Image = ({ alternativeText, id, sizeSlug, setAttributes }) => {\n  const media = useSelect(\n    (select) => id && select(coreStore).getMedia(id, { context: 'view' }),\n    [id],\n  );\n\n  const src = useMemo(() => {\n    if (!media) {\n      return null;\n    }\n\n    // Try to use the previous selected image size if its available\n    // otherwise fallback to \"full\"\n    let size = 'full';\n    if (sizeSlug && hasSize(media, sizeSlug)) {\n      size = sizeSlug;\n    }\n\n    return imageUrl(media, size);\n  }, [media, sizeSlug]);\n\n  if (media?.id && src) {\n    return <img src={src} alt={alternativeText} />;\n  }\n\n  return (\n    <MediaUploadCheck>\n      <MediaUpload\n        value={{ id: media?.id, src }}\n        allowedTypes={['image']}\n        onSelect={(item) => setAttributes({ id: item.id })}\n        render={({ open }) => (\n          <Flex\n            className=\"wp-block-bigbite-image-comparison-item__uploader\"\n            direction=\"column\"\n            justify=\"center\"\n          >\n            <FlexItem>\n              <Button variant=\"primary\" onClick={open}>\n                {__('Select Image', 'bigbite-image-comparison')}\n              </Button>\n            </FlexItem>\n          </Flex>\n        )}\n      />\n    </MediaUploadCheck>\n  );\n};\n\nexport default Image;\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { TextareaControl } from '@wordpress/components';\n\n/**\n * Renders alternative text controls\n *\n * @param {object}   props                 Component props\n * @param {number}   props.id              Selected image id\n * @param {string}   props.alternativeText Alternative image text\n * @param {function} props.setAttributes   Update block attributes\n */\nconst AlternativeText = ({ id, alternativeText, setAttributes }) => (\n  <TextareaControl\n    disabled={!id}\n    maxLength={150}\n    value={alternativeText}\n    label={__('Alternative Text', 'bigbite-image-comparison')}\n    onChange={(value) => setAttributes({ alternativeText: value })}\n    help={__(\n      \"Please describe the image. If left blank, the image's original alternative text will be used, if available.\",\n      'bigbite-image-comparison',\n    )}\n  />\n);\n\nexport default AlternativeText;\n","/**\n * External dependencies\n */\nimport { SelectControl } from '@wordpress/components';\nimport { __, _x } from '@wordpress/i18n';\nimport { useSelect } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\n\nconst DEFAULT_SIZE_OPTIONS = [\n  {\n    label: _x('Thumbnail', 'Image size option for resolution control', 'default'),\n    value: 'thumbnail',\n  },\n  {\n    label: _x('Medium', 'Image size option for resolution control', 'default'),\n    value: 'medium',\n  },\n  {\n    label: _x('Large', 'Image size option for resolution control', 'default'),\n    value: 'large',\n  },\n  {\n    label: _x('Full Size', 'Image size option for resolution control', 'default'),\n    value: 'full',\n  },\n];\n\n/**\n * Resolution setting component\n *\n * @param {object}   props    Component props\n * @param {string}   value    Current value of the sizeSlug attribute\n * @param {function} props.setAttributes Update block attributes\n * @param {object}   DEFAULT_SIZE_OPTIONS Default options for size options.\n */\nexport default function ResolutionTool({\n  id,\n  value,\n  setAttributes,\n  defaultValue = DEFAULT_SIZE_OPTIONS[3].value,\n}) {\n  const image = useSelect(\n    (select) => (id ? select(coreStore).getMedia(id, { context: 'view' }) : null),\n    [id],\n  );\n\n  /**\n   * Converts a given string by capitalizing the first letter of each word\n   * and removing underscores.\n   *\n   * @param {string} str - The input string to be converted.\n   * @returns {string} The converted string with capitalized words and spaces.\n   *\n   */\n  const convertName = (str) =>\n    str\n      .split('_') // Split the string by underscores\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize each word\n      .join(' '); // Join the words back together without underscores\n\n  /**\n   * Retrieves and formats the available image sizes from the current image object.\n   *\n   * @returns {Array<Object>|boolean} An array of objects with `label` and `value`\n   * properties for each image size, or `false` if the `image` object is not defined.\n   */\n  const getImageSizes = () => {\n    if (!image) return false;\n\n    const { sizes: imageSizes } = image?.media_details ?? {};\n\n    return Object.entries(imageSizes).map(([key]) => ({\n      label: convertName(key),\n      value: key,\n    }));\n  };\n\n  /**\n   * Updates the image URL and size slug attributes based on the selected image size.\n   *\n   * @param {string} newSizeSlug - The slug of the new image size to be selected.\n   * @returns {null|void} Returns `null` if the new URL is not found, otherwise\n   * updates the attributes with the new URL and size slug.\n   */\n  const updateImage = (newSizeSlug) => {\n    const newUrl = image?.media_details?.sizes?.[newSizeSlug]?.source_url;\n    if (!newUrl) {\n      return null;\n    }\n\n    return setAttributes({ sizeSlug: newSizeSlug });\n  };\n\n  const displayValue = value ?? defaultValue;\n  return (\n    <SelectControl\n      label={__('Resolution', 'bigbite-image-comparison')}\n      value={displayValue}\n      options={getImageSizes()}\n      onChange={(val) => updateImage(val)}\n      help={__('Select the size of the source image.', 'bigbite-image-comparison')}\n    />\n  );\n}\n","/**\n * External dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { PanelBody, PanelRow } from '@wordpress/components';\nimport { InspectorControls, BlockControls, MediaReplaceFlow } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport Image from './Image';\nimport AlternativeText from './AlternativeText';\nimport ResolutionTool from './ResolutionTool';\n\n/**\n * Renders block inspector controls sidebar\n *\n * @param {object}   props               Component props\n * @param {object}   props.attributes    Block attributes\n * @param {function} props.setAttributes Update block attributes\n */\nconst Settings = ({ attributes, setAttributes }) => (\n  <>\n    <InspectorControls>\n      <PanelBody\n        title={__('Settings', 'bigbite-image-comparison')}\n        className=\"wp-block-bigbite-image-comparison-item__settings\"\n      >\n        <PanelRow>\n          <Image\n            id={attributes?.id}\n            sizeSlug={attributes?.sizeSlug}\n            setAttributes={setAttributes}\n            alternativeText={attributes?.alternativeText}\n          />\n        </PanelRow>\n        <PanelRow>\n          <AlternativeText\n            id={attributes?.id}\n            setAttributes={setAttributes}\n            alternativeText={attributes?.alternativeText}\n          />\n        </PanelRow>\n        <PanelRow>\n          <ResolutionTool\n            value={attributes?.sizeSlug}\n            setAttributes={setAttributes}\n            id={attributes?.id}\n          />\n        </PanelRow>\n      </PanelBody>\n    </InspectorControls>\n    <BlockControls group=\"other\">\n      <MediaReplaceFlow\n        accept=\"image/*\"\n        mediaId={attributes?.id}\n        allowedTypes={['image']}\n        onSelect={(media) => setAttributes({ id: media?.id })}\n        name={\n          attributes?.id\n            ? __('Replace', 'bigbite-image-comparison')\n            : __('Select Image', 'bigbite-image-comparison')\n        }\n      />\n    </BlockControls>\n  </>\n);\n\nexport default Settings;\n","/**\n * External dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport Edit from './components/Edit';\nimport './styles/editor.scss';\nimport metadata from '../../../inc/blocks/image-comparison-item/block.json';\n\nregisterBlockType(metadata.name, {\n  edit: Edit,\n  save: () => null, // eslint-disable-line jsdoc/require-jsdoc -- not necessary\n});\n","/**\n * External dependencies\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport Image from './Image';\nimport Settings from './Settings';\n\n/**\n * Block edit function\n *\n * @param {object}   props               Component props\n * @param {object}   props.attributes    Block attributes\n * @param {function} props.setAttributes Update block attributes\n */\nconst Edit = ({ attributes, setAttributes }) => (\n  <>\n    <Settings attributes={attributes} setAttributes={setAttributes} />\n    {/* eslint-disable-next-line react/jsx-props-no-spreading -- this is the recommended approach */}\n    <div {...useBlockProps()}>\n      <Image id={attributes.id} sizeSlug={attributes.sizeSlug} setAttributes={setAttributes} />\n    </div>\n  </>\n);\n\nexport default Edit;\n"],"names":["window","_ref","caption","setAttributes","uniqueId","React","createElement","RichText","id","value","disableLineBreaks","identifier","tagName","allowedFormats","className","onChange","placeholder","__","overflow","ToggleControl","checked","label","help","dividerAxis","ToggleGroupControl","isBlock","ToggleGroupControlOption","containerBoxHeight","containerBoxWidth","availableUnits","a11yLabel","step","Grid","columns","gap","UnitControl","newWidth","containerWidth","units","newHeight","containerHeight","dividerIconGap","RangeControl","min","max","initialPosition","dividerBoxWidth","dividerBoxHeight","dividerThickness","dividerInitialPosition","dividerBoxBorderRadius","top","right","bottom","left","withColors","dividerColour","dividerBoxColour","dividerIconColour","captionTextColour","captionBackgroundColour","attributes","customDividerColour","customDividerBoxColour","customDividerIconColour","customCaptionTextColour","customCaptionBackgroundColour","shouldDisplayResize","clientId","setDividerColour","setDividerBoxColour","setDividerIconColour","setCaptionTextColour","setCaptionBackgroundColour","colors","disableCustomColors","useMultipleOriginColorsAndGradients","colourSettings","colorValue","color","onColorChange","arguments","length","undefined","push","Fragment","InspectorControls","PanelBody","title","SettingsOverflow","SettingsContainerSize","SettingsDividerInitialPosition","SettingsDividerAxis","group","SettingsDividerThickness","SettingsDividerBoxWidth","SettingsDividerBoxHeight","SettingsDividerBoxBorderRadius","SettingsDividerIconGap","ColorGradientSettingsDropdown","panelId","settings","hasColorsOrGradients","__experimentalIsRenderedInSidebar","ContrastChecker","textColor","backgroundColor","ContainerDivider","type","children","registerBlockType","metadata","edit","contentWidth","useSettings","innerBlockSettings","template","templateLock","orientation","useEffect","innerBlocks","wp","data","select","getBlocksByClientId","forEach","block","resizeDirectionSettings","bottomLeft","bottomRight","topLeft","topRight","blockProps","useBlockProps","style","innerBlocksProps","useInnerBlocksProps","updateMeasurement","measurement","delta","parts","match","parseInt","Settings","ResizableBox","showHandle","enable","size","height","width","minHeight","minWidth","onResizeStop","event","direction","elt","updatedHeight","updatedWidth","handleContainerResize","Container","Caption","save","Save","alternativeText","sizeSlug","media","useSelect","coreStore","getMedia","context","src","useMemo","image","sizes","media_details","hasSize","url","source_url","imageUrl","alt","MediaUploadCheck","MediaUpload","allowedTypes","onSelect","item","render","_ref2","open","Flex","justify","FlexItem","Button","variant","onClick","TextareaControl","disabled","maxLength","DEFAULT_SIZE_OPTIONS","_x","ResolutionTool","defaultValue","displayValue","SelectControl","options","getImageSizes","imageSizes","Object","entries","map","key","str","split","word","charAt","toUpperCase","slice","join","val","newSizeSlug","newUrl","updateImage","PanelRow","Image","AlternativeText","BlockControls","MediaReplaceFlow","accept","mediaId","name"],"sourceRoot":""}